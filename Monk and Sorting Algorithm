//This solution has some bugs

/*
#include<bits/stdc++.h>
using namespace std;

bool cmp(pair<unsigned long long int,unsigned long long int>& p1,
        pair<unsigned long long int,unsigned long long int>& p2)    
    {
        return p1.second<p2.second; 
    }


int main()
{   
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);

    int N; cin>>N;
    unsigned long long int arr[N];

    for(int i=0;i<N;i++){
        cin>>arr[i];
    }

    vector<pair<unsigned long long int,unsigned long long int>> vec;

    for(int i=0;i<N;i++){
        vec.push_back(make_pair(arr[i],0));
    }

    int i=1;
    int count=0;
    do{
        
        //Calculating Weights For Whole Array
         count=0;
        for(int j=0;j<N;j++){

            //Converting a integer into vector storing its digits
            unsigned long long int num = vec[j].first;
            vector<int> digits;
            while(num/10>0){
                digits.push_back(num%10);
                num=num/10;
            }digits.push_back(num);

            //Fetch the weight from vector of digits
            int high = 5*i;
            int low = 1 + 5*(i-1);
            int newnum= 0;
            while(high>=low)
            {
                if(high > digits.size())
                    newnum = 0;
                else
                    newnum = newnum*10 + digits[high-1];
                high--;
            }
            vec[j].second = newnum;
            if(newnum==0)
                count++;
        }
        if(count==N){}
            // cout<<0<<"\n";
        else{
            sort(vec.begin(),vec.end(),cmp);

            for(auto& x:vec){
                cout<<x.first<<" ";
            }cout<<"\n";
        }
        i++;
    }while(count<N);

    return 0;
}

*/

//This is a copied Solution

#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define ll long long int
#define ld long double
#define pb push_back
#define mkp make_pair
#define pii pair<int, int> 
#define pll pair<long long int, long long int>
#define sci(x) scanf("%d", &x)
#define scl(x) scanf("%lld", &x)

ll arr[1000001], tmp[1000001], A[1000001], tmp1[1000001];
ll I;

void merge(int start, int mid, int end)
{
	int p = start; 
	int q = mid;
	int r = p;
	while (p < mid && q <= end) {
		if (arr[p] <= arr[q]) {
		    tmp1[r] = A[p];
			tmp[r++] = arr[p++];
		} else {
		    tmp1[r] = A[q];
			tmp[r++] = arr[q++];
		}
	}
	while (p < mid) {
	    tmp1[r] = A[p];
		tmp[r++] = arr[p++];
	}
	while (q <= end) {
	    tmp1[r] = A[q];
		tmp[r++] = arr[q++];
	}
	for (p = start; p <= end; ++p) {
		arr[p] = tmp[p];
		A[p] = tmp1[p];
	}
}

void merge_sort(int l, int r)
{
	if (l < r) {
		int mid = (l+r) >> 1;
		merge_sort(l, mid);
		merge_sort(mid+1, r);
		merge(l, mid+1, r);
	}
}

int main()
{
	ll n, i, x, y;
	cin >> n;
	x = 0;
	for (i = 0; i < n; ++i) {
		scl(A[i]);
		if (A[i] > x) x = A[i]; 
	}

	y = 1;
	I = 1;
	while (x/I) {
	    for (i = 0; i < n; ++i) {
	        arr[i] = (A[i] / I) % 100000;
	    }
		merge_sort(0, n-1);
		for (i = 0; i < n; ++i) {
			printf("%lld ", A[i]);
		}
		puts("");
		I *= 100000;
	}

	return 0;
}
